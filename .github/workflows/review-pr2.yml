name: Build Packages with custom Patches

run-name: Apply patch from ${{ github.event.inputs.patch_path }} and build packages

on:
  workflow_dispatch:
    inputs:
      patch_path:
        description: 'Patch URL or path'
        required: true
        type: string
      package_name:
        description: 'Package name to build'
        required: true
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      patch_hash: ${{ steps.hash.outputs.value }}
    steps:
    - name: Checkout nixpkgs unstable
      uses: actions/checkout@v4
      with:
        repository: NixOS/nixpkgs
        ref: nixpkgs-unstable
        path: nixpkgs

    - name: Apply patch
      run: |
        cd nixpkgs
        curl -L "${{ github.event.inputs.patch_path }}" > pr.patch
        git apply --reject --whitespace=fix pr.patch || echo "Applying patch with possible minor conflicts"
        git diff > patch.diff
      working-directory: ./

    - name: Generate patch hash
      id: hash
      run: |
        cd nixpkgs
        sha256sum patch.diff | awk '{print $1}' > patch_hash
        echo "value=$(cat patch_hash)" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        system: [x86_64-linux, riscv64-linux, loongarch64-linux, aarch64-linux]

    steps:
    - name: Restore nixpkgs with patch
      uses: actions/checkout@v4
      with:
        repository: NixOS/nixpkgs
        ref: master
        path: nixpkgs

    - name: Apply cached patch
      run: |
        cd nixpkgs
        echo "Downloading patch..."
        curl -L "${{ github.event.inputs.patch_path }}" > pr.patch
        git apply --reject --whitespace=fix pr.patch
      working-directory: ./

    - name: Install Nix
      uses: cachix/install-nix-action@v27

    - name: Build package
      continue-on-error: true
      run: |
        case "${{ matrix.system }}" in
          x86_64-linux)
            attr_path="${{ github.event.inputs.package_name }}"
            ;;
          riscv64-linux)
            attr_path="pkgsCross.riscv64.${{ github.event.inputs.package_name }}"
            ;;
          loongarch64-linux)
            attr_path="pkgsCross.loongarch64-linux.${{ github.event.inputs.package_name }}"
            ;;
          aarch64-linux)
            attr_path="pkgsCross.aarch64-multiplatform.${{ github.event.inputs.package_name }}"
            ;;
          *)
            echo "Unsupported system: ${{ matrix.system }}"
            exit 1
            ;;
        esac

        nix-build \
          --argstr system "${{ matrix.system }}" \
          -I nixpkgs=./nixpkgs \
          -E "with import <nixpkgs> {}; $attr_path" \
          --show-trace

        mkdir -p results/${{ matrix.system }}
        cp -L result* results/${{ matrix.system }} || true
      working-directory: ./
